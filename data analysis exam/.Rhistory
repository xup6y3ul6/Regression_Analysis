geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "probit")),
linetype = "longdash", color = "red", fill = "lightpink", alpha = 0.2) +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "cloglog")),
linetype = "dashed", color = "forestgreen", fill = "lightgreen", alpha = 0.05) +
theme_classic()
ggplot(data, aes(x = LogDose, y = Propotion, weight = GroupSize)) +
geom_point() +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "logit")),
fill = "lightblue") +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "probit")),
linetype = "longdash", color = "red", fill = "lightpink") +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "cloglog")),
linetype = "dashed", color = "forestgreen", fill = "lightgreen", alpha = 0.05) +
theme_classic()
ggplot(data, aes(x = LogDose, y = Propotion, weight = GroupSize)) +
geom_point() +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "logit")),
fill = "lightblue") +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "probit")),
linetype = "longdash", color = "red", fill = "lightpink") +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "cloglog")),
linetype = "dashed", color = "forestgreen", fill = "lightgreen") +
theme_classic()
ggplot(data, aes(x = LogDose, y = Propotion, weight = GroupSize)) +
geom_point() +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "logit")),
fill = "lightblue", alpha = 0.5) +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "probit")),
linetype = "longdash", color = "red", fill = "lightpink", alpha = 0.5) +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "cloglog")),
linetype = "dashed", color = "forestgreen", fill = "lightgreen", alpha = 0.5) +
theme_classic()
ggplot(data, aes(x = LogDose, y = Propotion, weight = GroupSize)) +
geom_point() +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "logit")),
fill = "lightblue", alpha = 0.25) +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "probit")),
linetype = "longdash", color = "red", fill = "lightpink", alpha = 0.25) +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "cloglog")),
linetype = "dashed", color = "forestgreen", fill = "lightgreen", alpha = 0.25) +
theme_classic()
ggplot(data, aes(x = LogDose, y = Propotion, weight = GroupSize)) +
geom_point() +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "logit")),
fill = "lightblue", alpha = 0.15) +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "probit")),
linetype = "longdash", color = "red", fill = "lightpink", alpha = 0.15) +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "cloglog")),
linetype = "dashed", color = "forestgreen", fill = "lightgreen", alpha = 0.15) +
theme_classic()
AIC(binom_logit)
data <- data %>%
mutate(NoResponse = GroupSize - Response,
Propotion = Response / GroupSize)
binom_logit <- glm(formula = cbind(Response, NoResponse) ~ 1 + LogDose,
data = data,
family = binomial(link = "logit"))
# binom_logit <- glm(formula = Propotion ~ 1 + LogDose,
#                    data = data,
#                    weights = GroupSize,
#                    family = binomial(link = "logit"))
summary(binom_logit)
binom_probit <- glm(formula = cbind(Response, NoResponse) ~ 1 + LogDose,
data = data,
family = binomial(link = "probit"))
summary(binom_probit)
binom_cloglog <- glm(formula = cbind(Response, NoResponse) ~ 1 + LogDose,
data = data,
family = binomial(link = "cloglog"))
summary(binom_cloglog)
beta <- data.frame(beta_logit = binom_logit$coefficients,
beta_probit = binom_probit$coefficients,
beta_probit_adj = binom_probit$coefficients * (pi/sqrt(3)),
beta_cloglog = binom_cloglog$coefficients,
beta_cloglog_adj = binom_cloglog$coefficients * (pi/sqrt(6)))
knitr::kable(beta)
AIC(binom_logit)
BIC(binom_logit)
m <- data.frame(AIC = sapply(list(binom_logit, binom_probit, binom_cloglog), AIC),
BIC = sapply(list(binom_logit, binom_probit, binom_cloglog), BIC))
m
m <- data.frame(AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC),
names = names(binom_models))
binom_models <- list(binom_logit, binom_probit, binom_cloglog)
m <- data.frame(AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC),
names = names(binom_models))
binom_models <- list(logit = binom_logit, probit = binom_probit, cloglog = binom_cloglog)
m <- data.frame(AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC),
names = names(binom_models))
m
binom_models <- list(logit = binom_logit, probit = binom_probit, cloglog = binom_cloglog)
m <- data.frame(AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC))
m
binom_logit$deviance
binom_models <- list(logit = binom_logit, probit = binom_probit, cloglog = binom_cloglog)
criterion <- data.frame(Perason_statistic = sapply(binom_models, function(.binom){sum(residuals(.binom, type = "pearson")^2)}),
Deviance = sapply(binom_models, deviance)
AIC = sapply(binom_models, AIC),
binom_models <- list(logit = binom_logit, probit = binom_probit, cloglog = binom_cloglog)
criterion <- data.frame(Perason_statistic = sapply(binom_models, function(.binom){sum(residuals(.binom, type = "pearson")^2)}),
Deviance = sapply(binom_models, deviance),
AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC))
criterion
binom_models <- list(logit = binom_logit, probit = binom_probit, cloglog = binom_cloglog)
criterion <- data.frame(Perason_statistic = sapply(binom_models, function(.binom){sum(residuals(.binom, type = "pearson")^2)}),
Deviance = sapply(binom_models, deviance),
AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC))
knitr::kable(criterion, digits = 2)
ggplot(data, aes(x = LogDose, y = Propotion, weight = GroupSize)) +
geom_point() +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "logit")),
fill = "lightblue", alpha = 0.25) +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "probit")),
linetype = "longdash", color = "red", fill = "lightpink", alpha = 0.25) +
geom_smooth(method = "glm", formula =  y ~ 1 + x,
method.args = list(family = binomial(link = "cloglog")),
linetype = "dashed", color = "forestgreen", fill = "lightgreen", alpha = 0.25) +
theme_classic()
binom_models <- list(logit = binom_logit, probit = binom_probit, cloglog = binom_cloglog)
criterion <- data.frame(Perason_statistic = sapply(binom_models, function(.binom){sum(residuals(.binom, type = "pearson")^2)}),
Deviance = sapply(binom_models, deviance),
AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC))
knitr::kable(criterion, digits = 2)
beta <- data.frame(beta_logit = binom_logit$coefficients,
beta_probit = binom_probit$coefficients,
beta_probit_adj = binom_probit$coefficients * (pi/sqrt(3)),
beta_cloglog = binom_cloglog$coefficients,
beta_cloglog_adj = binom_cloglog$coefficients * (pi/sqrt(6)))
knitr::kable(beta, digits = 2)
library(tidyverse)
data <- data.frame(LogDose = c(0.71, 1.00, 1.31, 1.48, 1.61, 1.70),
GroupSize = c(49, 48, 48, 49, 50, 48),
Response = c(16, 18, 34, 47, 47, 48)) %>%
mutate(NoResponse = GroupSize - Response,
Propotion = Response / GroupSize)
knitr::kable(data, align = "c")
knitr::kable(data, align = "c")
knitr::kable(data, align = "c", digits = 2)
length(data)
data
nrow(data)
qchisq(0.95, df = nrow(data)-2)
residuals(binom_cloglog)
binom_cloglog$deviance
binom_cloglog$converged
binom_cloglog$family
deviance_res <- residuals(binom_cloglog, type = "deviance")
peardon_res <- redisuals(binom_cloglog, type = "pearson")
deviance_res <- residuals(binom_cloglog, type = "deviance")
peardon_res <- residuals(binom_cloglog, type = "pearson")
deviance_res
peardon_res
pearson_res <- residuals(binom_cloglog, type = "pearson")
deviance^2 %>% sum()
sum(deviance_res^2)
critierion
criterion
sum(pearson_res^2)
rstandard(binom_cloglog)
deviance_res
binom_cloglog$effects
h <- hat(binom_cloglog)
h <- hatvalues(binom_cloglog)
h
pearson_res / sqrt(1-h)
rstandard(binom_cloglog, type = "pearson")
rstandard(binom_cloglog, type = "deviance")
deviance_res / sqrt(1 - h)
binom_cloglog_res = data.frame(
y_bar = data$Propotion,
y_fit = fitted(binom_cloglog),
pearson_res = residuals(binom_cloglog, type = "pearson"),
standard_pearson_res = rstandard(binom_cloglog, type = "pearson"),
deviance_res = residuals(binom_cloglog, type = "deviance"),
standard_deviance_res = rstandard(binom_clolog, type = "deviance")
)
binom_cloglog
binom_cloglog_res = data.frame(
y_bar = data$Propotion,
y_fit = fitted(binom_cloglog),
pearson_res = residuals(binom_cloglog, type = "pearson"),
standard_pearson_res = rstandard(binom_cloglog, type = "pearson"),
deviance_res = residuals(binom_cloglog, type = "deviance"),
standard_deviance_res = rstandard(binom_cloglog, type = "deviance")
)
binom_cloglog_res
binom_models <- list(logit = binom_logit, probit = binom_probit, cloglog = binom_cloglog)
criterion <- data.frame(
perason_statistic = sapply(binom_models, function(.binom){
sum(residuals(.binom, type = "pearson")^2)
}),
pearson_pvalue = 1 - pchisq(pearson_statistic, df = 6-2)
deviance = sapply(binom_models, deviance),
binom_models <- list(logit = binom_logit, probit = binom_probit, cloglog = binom_cloglog)
criterion <- data.frame(
perason_statistic = sapply(binom_models, function(.binom){
sum(residuals(.binom, type = "pearson")^2)
}),
pearson_pvalue = 1 - pchisq(pearson_statistic, df = 6-2),
deviance = sapply(binom_models, deviance),
AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC)
)
binom_logit$df.null
binom_logit$df.residual
binom_models <- list(logit = binom_logit, probit = binom_probit, cloglog = binom_cloglog)
criterion <- data.frame(
perason_statistic = sapply(binom_models, function(.binom){
sum(residuals(.binom, type = "pearson")^2)
}),
deviance = sapply(binom_models, deviance),
AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC)
) %>%
mutate(`pvalue (pearson)` = sapply(binom_models, function(.binom){
1 - pchisq(pearson_statistic, df = .binom$df.residual)
}), .after = pearson_statistic) %>%
mutate(`pvalue (deviance)` = sapply(binom_models, function(.binom){
1 - pchisq(deviance, df = .binom$df.residual)
}), .after = deviance)
criterion <- data.frame(
perason_statistic = sapply(binom_models, function(.binom){
sum(residuals(.binom, type = "pearson")^2)
}),
deviance = sapply(binom_models, deviance),
AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC)
) %>%
mutate("pvalue (pearson)" = sapply(binom_models, function(.binom){
1 - pchisq(pearson_statistic, df = .binom$df.residual)
}), .after = pearson_statistic) %>%
mutate(`pvalue (deviance)` = sapply(binom_models, function(.binom){
1 - pchisq(deviance, df = .binom$df.residual)
}), .after = deviance)
criterion <- data.frame(
perason_statistic = sapply(binom_models, function(.binom){
sum(residuals(.binom, type = "pearson")^2)
}),
deviance = sapply(binom_models, deviance),
AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC)
) %>%
mutate("pvalue (pearson)" = sapply(binom_models, function(.binom){
1 - pchisq(pearson_statistic, df = .binom$df.residual)
}), .after = pearson_statistic) %>%
mutate("pvalue (deviance)" = sapply(binom_models, function(.binom){
1 - pchisq(deviance, df = .binom$df.residual)
}), .after = deviance)
criterion <- data.frame(
perason_statistic = sapply(binom_models, function(.binom){
sum(residuals(.binom, type = "pearson")^2)
}),
deviance = sapply(binom_models, deviance),
AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC)
) %>%
mutate("pvalue_pearson" = sapply(binom_models, function(.binom){
1 - pchisq(pearson_statistic, df = .binom$df.residual)
}), .after = pearson_statistic) %>%
mutate("pvalue (deviance)" = sapply(binom_models, function(.binom){
1 - pchisq(deviance, df = .binom$df.residual)
}), .after = deviance)
criterion <- data.frame(
perason_statistic = sapply(binom_models, function(.binom){
sum(residuals(.binom, type = "pearson")^2)
}),
deviance = sapply(binom_models, deviance),
AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC)
) %>%
mutate("pvalue_pearson" = 1 - pchisq(pearson_statistic, df = .binom$df.residual),
.after = pearson_statistic)
criterion <- data.frame(
perason_statistic = sapply(binom_models, function(.binom){
sum(residuals(.binom, type = "pearson")^2)
}),
deviance = sapply(binom_models, deviance),
AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC)
) %>%
mutate("pvalue_pearson" = 1 - pchisq(pearson_statistic, df = 4),
.after = pearson_statistic)
criterion <- data.frame(
perason_statistic = sapply(binom_models, function(.binom){
sum(residuals(.binom, type = "pearson")^2)
}),
deviance = sapply(binom_models, deviance),
AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC)
) %>%
add_column("pvalue (deviance)" = sapply(binom_models, function(.binom){
1 - pchisq(deviance, df = .binom$df.residual)
}), .after = deviance)
1 - pchisq(criterion$deviance, df = .binom$df.residual)
criterion <- data.frame(
perason_statistic = sapply(binom_models, function(.binom){
sum(residuals(.binom, type = "pearson")^2)
}),
deviance = sapply(binom_models, deviance),
AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC)
) %>%
add_column("pvalue (deviance)" = sapply(binom_models, function(.binom){
1 - pchisq(criterion$deviance, df = .binom$df.residual)
}), .after = deviance)
criterion <- data.frame(
perason_statistic = sapply(binom_models, function(.binom){
sum(residuals(.binom, type = "pearson")^2)
}),
deviance = sapply(binom_models, deviance),
AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC)
) %>%
add_column("pvalue_pearson" = 1 - pchisq(pearson_statistic, df = 4),
.after = pearson_statistic)
criterion <- data.frame(
perason_statistic = sapply(binom_models, function(.binom){
sum(residuals(.binom, type = "pearson")^2)
}),
deviance = sapply(binom_models, deviance),
AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC)
) %>%
add_column("pvalue_pearson" = 1 - pchisq(criterionpearson_statistic, df = 4),
.after = pearson_statistic)
criterion <- data.frame(
perason_statistic = sapply(binom_models, function(.binom){
sum(residuals(.binom, type = "pearson")^2)
}),
deviance = sapply(binom_models, deviance),
AIC = sapply(binom_models, AIC),
BIC = sapply(binom_models, BIC)
) %>%
add_column("pvalue_pearson" = 1 - pchisq(criterion$pearson_statistic, df = 4),
.after = pearson_statistic)
add_column(criterion, "pvalue_pearson" = 1 - pchisq(criterion$pearson_statistic, df = 4),
.after = pearson_statistic)
binom_cloglog_res = data.frame(
y_bar = data$Propotion,
y_fit = fitted(binom_cloglog),
pearson_res = residuals(binom_cloglog, type = "pearson"),
standardized_pearson_res = rstandard(binom_cloglog, type = "pearson"),
deviance_res = residuals(binom_cloglog, type = "deviance"),
standardized_deviance_res = rstandard(binom_cloglog, type = "deviance")
)
knitr::kable(binom_cloglog_res, digits = 2)
binom_cloglog_res = data.frame(
y_bar = data$Propotion,
y_fit = fitted(binom_cloglog),
pearson_res = residuals(binom_cloglog, type = "pearson"),
stand_pearson_res = rstandard(binom_cloglog, type = "pearson"),
deviance_res = residuals(binom_cloglog, type = "deviance"),
stand_deviance_res = rstandard(binom_cloglog, type = "deviance")
)
knitr::kable(binom_cloglog_res, digits = 2)
binom_cloglog_res = data.frame(
y_bar = data$Propotion,
y_fit = fitted(binom_cloglog),
pearson_res = residuals(binom_cloglog, type = "pearson"),
stand_pearson_res = rstandard(binom_cloglog, type = "pearson"),
deviance_res = residuals(binom_cloglog, type = "deviance"),
stand_deviance_res = rstandard(binom_cloglog, type = "deviance")
)
knitr::kable(binom_cloglog_res, digits = 2)
ggplot(binom_cloglog_res, aes(x = y_fit)) +
geom_point(aes(y = stand_pearson_res), shape = 19) +
geom_point(aes(y = stand_deviance_res), shape = 1) +
geom_hline(yintercept = c(0, 0.1))
qnorm(c(0.025, 0.975))
ggplot(binom_cloglog_res, aes(x = y_fit)) +
geom_point(aes(y = stand_pearson_res), shape = 19) +
geom_point(aes(y = stand_deviance_res), shape = 1) +
geom_hline(yintercept = qnorm(c(0.025, 0.975), mean = 0, se = 1),
color = "red", linetype = "dashed")
ggplot(binom_cloglog_res, aes(x = y_fit)) +
geom_point(aes(y = stand_pearson_res), shape = 19) +
geom_point(aes(y = stand_deviance_res), shape = 1) +
geom_hline(yintercept = qnorm(c(0.025, 0.975), mean = 0, sd = 1),
color = "red", linetype = "dashed")
ggplot(binom_cloglog_res, aes(x = y_fit)) +
geom_point(aes(y = stand_pearson_res), shape = 19) +
geom_point(aes(y = stand_deviance_res), shape = 1) +
geom_hline(yintercept = qnorm(c(0.025, 0.975), mean = 0, sd = 1),
color = "red", linetype = "dashed") +
labs(y = "standardized (Pearson / deviance) residual") +
theme_classic()
binom_cloglog
summary(binom_cloglog)
deviance(binom_cloglog)
criterion
quasibinom_cloglog <- update(binom_cloglog,
family = quasibinomial(link = "cloglog"))
summary(squasibinomial)
quasibinom_cloglog <- update(binom_cloglog,
family = quasibinomial(link = "cloglog"))
summary(quasibinomial)
quasibinom_cloglog <- update(binom_cloglog,
family = quasibinomial(link = "cloglog"))
summary(quasibinomial)
quasibinom_cloglog
summary(quasibinomial_cloglog)
summary(quasibinomi_cloglog)
summary(quasibinom_cloglog)
install.packages("AER")
AER::dispersiontest(binom_cloglog)
binom_cloglog2 <- glm(formula = cbind(Response, NoResponse) ~ 1 + LogDose + I(LogDose^2),
data = data,
family = binomial(link = "cloglog"))
summary(binom_cloglog2)
anova(binom_cloglog2, binom_cloglog)
anova(binom_cloglog2, binom_cloglog, test = "Chisq")
anova(binom_cloglog2, binom_cloglog, test = "LRT")
anova(binom_cloglog2, binom_cloglog, test = "LRT")
anova(binom_cloglog2, binom_cloglog, test = "Chisq")
anova(binom_cloglog2, binom_cloglog)
anova(binom_cloglog, binom_cloglog2, test = "LRT")
binom_cloglog3 <- glm(formula = cbind(Response, NoResponse) ~ 1 + LogDose + I(LogDose^2) + I(LogDose^3),
data = data,
family = binomial(link = "cloglog"))
summary(binom_cloglog3)
anova(binom_cloglog, binom_cloglog2, test = "LRT")
anova(binom_cloglog, binom_cloglog3, test = "LRT")
anova(binom_cloglog2, binom_cloglog3, test = "LRT")
setwd("C:/Users/Nick Lin/OneDrive - g.ntu.edu.tw/109_心理碩二/Regression Analysis/test")
knitr::opts_chunk$set(
message = FALSE, 	warning = FALSE, comment = "",
fig.width = 5, fig.asp = 0.68, fig.align = "center",
eval = TRUE
)
library(tidyverse)
data <- data.frame(LogDose = c(0.71, 1.00, 1.31, 1.48, 1.61, 1.70),
GroupSize = c(49, 48, 48, 49, 50, 48),
Response = c(16, 18, 34, 47, 47, 48)) %>%
mutate(NoResponse = GroupSize - Response,
Propotion = Response / GroupSize)
knitr::kable(data, digits = 2)
binom_logit <- glm(formula = cbind(Response, NoResponse) ~ 1 + LogDose,
data = data,
family = binomial(link = "logit"))
## or can write as
# binom_logit <- glm(formula = Propotion ~ 1 + LogDose,
#                    data = data,
#                    weights = GroupSize,
#                    family = binomial(link = "logit"))
summary(binom_logit)
confint(binom_logit)
confint.default(binom_logit)
4.46+1.96*0.5155
confint.glm
MASS:confint.glm(binom_logit)
MASS::confint.glm(binom_logit)
library(MASS)
confint(binom_logit)
class(binom_logit)
confint.glm(binom_logit)
confint.glm(binom_logit)
confint(glm)
confint.default(binom_logit)
predict(binom_logit)
predict(binom_logit, type = "link")
predict(binom_logit, type = "response")
predict(binom_logit, type = "term")
a = predict(binom_logit)
exp(a) / (1+exp(a))
confint(binom_logit)
confint.default(binom_logit)
confitn.default(binom_logit, method = "Chisq")
confint(binom_logit, method = "Chisq")
confint(binom_logit, test = "Chisq")
-1.32992 + 1.95*0.85252
summary(binom_logit)
4.4602 +1.95*0.5155
4.4602 +qnorm(0.975)*0.5155
drop1(binom_logit)
binom_cloglog2 <- glm(formula = cbind(Response, NoResponse) ~ 1 + LogDose + I(LogDose^2),
data = data,
family = binomial(link = "cloglog"))
summary(binom_cloglog2)
drop1(binom_cloglog2)
drop1(binom_cloglog2, test = "Chisq")
summary(update(binom_cloglog2, -LogDose))
summary(update(binom_cloglog2, . ~ -LogDose))
summary(update(binom_cloglog2, . ~ . - LogDose))
drop1(binom_cloglog2, test = "Chisq")
drop1(binom_cloglog2, test = "LR")
drop1(binom_cloglog2, test = "LRT")
