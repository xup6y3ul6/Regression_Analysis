full_glht <- glht(full_lm, linfct = contrast_list)
confint(full_glht,
level = 0.95,
calpha = univariate_calpha()) # specify univariate confidence intervals
contrast_list <-  rbind("beta_1" = c(0, 1, 0, 0, 0, 0),
"beta_3 + 2*beta_5" = c(0, 0, 0, 1, 0, 2))
full_glht <- glht(full_lm, linfct = contrast_list)
confint(full_glht,
level = 0.95,
calpha = univariate_calpha()) # specify univariate confidence intervals
plot(full_confint)
library(multcomp)
contrast_list <-  rbind("beta_1" = c(0, 1, 0, 0, 0, 0),
"beta_3 + 2*beta_5" = c(0, 0, 0, 1, 0, 2))
full_glht <- glht(full_lm, linfct = contrast_list)
full_confint <- confint(full_glht,
level = 0.95,
calpha = univariate_calpha()) # specify univariate confidence intervals
full_confint
plot(full_confint)
contrast_list <-  rbind("β1" = c(0, 1, 0, 0, 0, 0),
"β3 + 2*β5" = c(0, 0, 0, 1, 0, 2))
full_glht <- glht(full_lm, linfct = contrast_list)
full_confint <- confint(full_glht,
level = 0.95,
calpha = univariate_calpha()) # specify univariate confidence intervals
full_confint
plot(full_confint)
library(multcomp)
contrast_list <-  rbind("β1" = c(0, 1, 0, 0, 0, 0),
"β3+2*β5" = c(0, 0, 0, 1, 0, 2))
full_glht <- glht(full_lm, linfct = contrast_list)
full_confint <- confint(full_glht,
level = 0.95,
calpha = univariate_calpha()) # specify univariate confidence intervals
full_confint
plot(full_confint)
summary(full_glht)
library(multcomp)
contrast_list <-  rbind("β1" = c(0, 1, 0, 0, 0, 0),
"β3+2*β5" = c(0, 0, 0, 1, 0, 2))
full_glht <- glht(full_lm, linfct = contrast_list)
summary(full_glht)
full_confint <- confint(full_glht,
level = 0.95,
calpha = univariate_calpha()) # specify univariate confidence intervals
full_confint
plot(full_confint)
xaringan:::inf_mr()
xaringan:::inf_mr()
install.packages("pagedown")
install.packages("xfun")
install.packages("xfun")
x <- rnorm(1000)
x2 <- x^2
cor(x, x2)
x3 <- x^3
cor(data.frame(x, x2, x3))
x <- runif(1000)
x2 <- x^2
x3 <- x^3
cor(data.frame(x, x2, x3))
x <- rbeta(1000, 2, 2)
x2 <- x^2
x3 <- x^3
cor(data.frame(x, x2, x3))
x <- c(1,2,3,4)
x2 <- x^2
x3 <- x^3
cor(data.frame(x, x2, x3))
#Raw:
fit.raw <- lm(Petal.Length ~ Petal.Width + I(Petal.Width^2) +
I(Petal.Width^3), data = iris)
summary(fit.raw)
#Orthogonal
fit.orth <- lm(Petal.Length ~ stats::poly(Petal.Width, 3), data = iris)
summmary(fit.orth)
summary(fit.orth)
stats::poly(Petal.Width, 3)
stats::poly(iris$Petal.Width, 3)
iris$Petal.Width
t.test(1:5, 3:9)
ln(7)
log(7)
log(8)
pnorm(0)
pnorm(0.1)
pnorm(0.2)
pnorm(0.1.5)
pnorm(0.15)
pnorm(0.3)
citation()
citaion(package = "Rjags")
citation("rjags")
citation("R2jags")
citation("psych")
citation()
citaion()
citation()
citation("psych")
runShiny()
install.packages("posterdown")
install.packages("pagedown")
knitr::opts_chunk$set(
message = FALSE, 	warning = FALSE, comment = "",
#fig.width = 5, fig.asp = 0.68,
fig.align = "center",
eval = TRUE
)
library(tidyverse)
library(grid)
library(gridExtra)
library(ggrepel)
setwd("C:/Users/Nick Lin/OneDrive - g.ntu.edu.tw/109_心理碩二/迴歸分析/HW4")
data2 <- readxl::read_xlsx("Exhibit_8-12.xlsx")
getLM2 <- function(data){
data_lm <- lm(y ~ 1 + x, data)
data <- mutate(data,
studentized_res = rstudent(data_lm),
leverage = hatvalues(data_lm),
cooks_dis = cooks.distance(data_lm))
g1 <- ggplot(data, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm") +
geom_label_repel(aes(label = Country), box.padding = 0.5, size = 2) +
theme_classic()
g2 <- ggplot(data, aes(x = Country, y = leverage)) +
geom_point() +
geom_hline(yintercept = 2*length(data_lm$coef)/nrow(data), color = "red") + # 2p/n
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
g3 <- ggplot(data, aes(x = Country, y = cooks_dis)) +
geom_point() +
geom_hline(yintercept = c(0.5, 1), color = "red") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
plot = arrangeGrob(g1, g2, g3, nrow = 1)
return(list(data = data, lm = data_lm, plot = plot))
}
data2 <- getLM2(data2)
summary(data2$lm)
grid.draw(data2$plot)
library(lm.br)
data2_lmbr <- lm.br(y ~ 1 + x, data = data2$data)
data2_lmbr
theta = data2_lmbr$coef["theta"]
alpha = data2_lmbr$coef["alpha"]
beta1 = data2_lmbr$coef["  x < theta"]
beta2 = data2_lmbr$coef["  x > theta"]
g1 <- ggplot(data2$data, aes(x = x, y = y)) +
geom_point() +
geom_vline(xintercept = theta, color = "red", linetype = "dashed") +
geom_segment(aes(x = min(x), y = alpha+beta1*(min(x)-theta),
xend = theta, yend = alpha),
color = "blue") +
geom_segment(aes(x = theta, y = alpha,
xend = max(x), yend = alpha+beta2*(max(x)-theta)),
color = "blue") +
theme_classic()
data2$data %>% View()
hatvalues(data2_lmbr)
data2$data <- data2$data %>%
add_column(residual = residuals(data2$lm),
residual_brokenLine = residuals(data2$lmbr))
residuals(data2$lmbr)
data2$data <- data2$data %>%
add_column(residual = residuals(data2$lm),
residual_brokenLine = residuals(data2_lmbr))
View(data2$data)
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual)) +
geom_point(aes(y = residual_brokenLine), shape = 1) +
theme_classic()
g2
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual)) +
geom_point(aes(y = residual_brokenLine), shape = 1) +
geom_label_repel(aes(label = Country), box.padding = 0.5, size = 2) +
theme_classic()
g2
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual)) +
geom_point(aes(y = residual_brokenLine), shape = 1) +
geom_label_repel(aes(y = residual, label = Country), box.padding = 0.5, size = 2) +
theme_classic()
g2
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual)) +
geom_point(aes(y = residual_brokenLine), shape = 1) +
geom_label_repel(aes(y = residual, label = Country), box.padding = 0.5, size = 3) +
theme_classic()
g2
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual)) +
geom_point(aes(y = residual_brokenLine), shape = 1) +
geom_label_repel(aes(y = residual,
label = ifelse(Country %in% potentialOutlier, Country, NULL)),
box.padding = 0.5, size = 3) +
theme_classic()
g2
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual)) +
geom_point(aes(y = residual_brokenLine), shape = 1) +
geom_label_repel(aes(y = residual,
label = ifelse(Country %in% potentialOutlier, Country, "")),
box.padding = 0.5, size = 3) +
theme_classic()
g2
potentialOutlier <- c("United States", "Great Britain", "Finland")
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual)) +
geom_point(aes(y = residual_brokenLine), shape = 1) +
geom_label_repel(aes(y = residual,
label = ifelse(Country %in% potentialOutlier, Country, "")),
box.padding = 0.5, size = 3) +
theme_classic()
g2
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual)) +
geom_point(aes(y = residual_brokenLine), shape = 1) +
geom_label_repel(aes(y = residual,
label = ifelse(Country %in% potentialOutlier, Country, NULL)),
box.padding = 0.5, size = 3) +
geom_hline(yintercept = 0) +
theme_classic()
g2
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual)) +
geom_point(aes(y = residual_brokenLine), shape = 1) +
geom_label_repel(aes(y = residual,
label = ifelse(Country %in% potentialOutlier, Country, "")),
box.padding = 0.5, size = 3) +
geom_hline(yintercept = 0) +
theme_classic()
g2
data2$data <- data2$data %>%
add_column(residual = residuals(data2$lm),
residual_brokenLine = residuals(data2_lmbr))
g2
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual, shape = "simple linear regression")) +
geom_point(aes(y = residual_brokenLine, shape = "broken line regression"), shape = 1) +
geom_label_repel(aes(y = residual,
label = ifelse(Country %in% potentialOutlier, Country, "")),
box.padding = 0.5, size = 3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
theme_classic()
g2
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual, shape = "simple linear regression")) +
geom_point(aes(y = residual_brokenLine, shape = "broken line regression")) +
geom_label_repel(aes(y = residual,
label = ifelse(Country %in% potentialOutlier, Country, "")),
box.padding = 0.5, size = 3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
theme_classic()
g2
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual, shape = "simple linear regression")) +
geom_point(aes(y = residual_brokenLine, shape = "broken line regression"),
shape = 1) +
geom_label_repel(aes(y = residual,
label = ifelse(Country %in% potentialOutlier, Country, "")),
box.padding = 0.5, size = 3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
theme_classic()
g2
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual, shape = "simple linear regression")) +
geom_point(aes(y = residual_brokenLine, shape = "broken line regression"),
shape = 2) +
geom_label_repel(aes(y = residual,
label = ifelse(Country %in% potentialOutlier, Country, "")),
box.padding = 0.5, size = 3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
theme_classic()
g2
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual, shape = "simple linear regression")) +
geom_point(aes(y = residual_brokenLine, shape = "broken line regression")) +
geom_label_repel(aes(y = residual,
label = ifelse(Country %in% potentialOutlier, Country, "")),
box.padding = 0.5, size = 3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
scale_shape_manual(values = c(21, 1)) +
theme_classic()
g2
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual, shape = "simple linear regression")) +
geom_point(aes(y = residual_brokenLine, shape = "broken line regression")) +
geom_label_repel(aes(y = residual,
label = ifelse(Country %in% potentialOutlier, Country, "")),
box.padding = 0.5, size = 3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
scale_shape_manual(values = c(2, 1)) +
theme_classic()
g2
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual, shape = "simple linear regression")) +
geom_point(aes(y = residual_brokenLine, shape = "broken line regression")) +
geom_label_repel(aes(y = residual,
label = ifelse(Country %in% potentialOutlier, Country, "")),
box.padding = 0.5, size = 3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
scale_shape_manual(values = c(20, 1)) +
theme_classic()
g2
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual, shape = "simple linear regression")) +
geom_point(aes(y = residual_brokenLine, shape = "broken line regression")) +
geom_label_repel(aes(y = residual,
label = ifelse(Country %in% potentialOutlier, Country, "")),
box.padding = 0.5, size = 3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
scale_shape_manual(values = c(16, 1)) +
theme_classic()
g2
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual, shape = "simple linear regression")) +
geom_point(aes(y = residual_brokenLine, shape = "broken line regression")) +
geom_label_repel(aes(y = residual,
label = ifelse(Country %in% potentialOutlier, Country, "")),
box.padding = 0.5, size = 3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
scale_shape_manual(values = c(1, 16)) +
theme_classic()
g2
grid.arrange(g1, g2, nrow = 1)
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual, shape = "simple linear regression")) +
geom_point(aes(y = residual_brokenLine, shape = "broken line regression")) +
geom_label_repel(aes(y = residual,
label = ifelse(Country %in% potentialOutlier, Country, "")),
box.padding = 0.5, size = 3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
scale_shape_manual(values = c(1, 16)) +
theme_classic() +
theme(legend.position = c(0.1, 0.9))
grid.arrange(g1, g2, nrow = 1)
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual, shape = "simple linear regression")) +
geom_point(aes(y = residual_brokenLine, shape = "broken line regression")) +
geom_label_repel(aes(y = residual,
label = ifelse(Country %in% potentialOutlier, Country, "")),
box.padding = 0.5, size = 3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
scale_shape_manual(values = c(1, 16)) +
theme_classic() +
theme(legend.position = c(0.24, 0.2))
grid.arrange(g1, g2, nrow = 1)
g2 <- ggplot(data2$data, aes(x = x)) +
geom_point(aes(y = residual, shape = "simple linear regression")) +
geom_point(aes(y = residual_brokenLine, shape = "broken line regression")) +
geom_label_repel(aes(y = residual,
label = ifelse(Country %in% potentialOutlier, Country, "")),
box.padding = 0.5, size = 3) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
scale_shape_manual(values = c(1, 16)) +
theme_classic() +
theme(legend.position = c(0.4, 0.2))
grid.arrange(g1, g2, nrow = 1)
grid.arrange(g1, g2, nrow = 1)
hatvalues(data2_lmbr)
data2$data
data2_rmUS$data
knitr::opts_chunk$set(
message = FALSE, 	warning = FALSE, comment = "",
fig.align = "center",
eval = TRUE
)
data2 <- readxl::read_xlsx("Exhibit_8-12.xlsx")
getLM2 <- function(data){
data_lm <- lm(y ~ 1 + x, data)
data <- mutate(data,
studentized_res = rstudent(data_lm),
leverage = hatvalues(data_lm),
cooks_dis = cooks.distance(data_lm))
g1 <- ggplot(data, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm") +
geom_label_repel(aes(label = Country), box.padding = 0.5, size = 2) +
theme_classic()
g2 <- ggplot(data, aes(x = Country, y = leverage)) +
geom_point() +
geom_hline(yintercept = 2*length(data_lm$coef)/nrow(data), color = "red") + # 2p/n
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
g3 <- ggplot(data, aes(x = Country, y = cooks_dis)) +
geom_point() +
geom_hline(yintercept = c(0.5, 1), color = "red") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
plot = arrangeGrob(g1, g2, g3, nrow = 1)
return(list(data = data, lm = data_lm, plot = plot))
}
data2 <- getLM2(data2)
summary(data2$lm)
data2_rmUS <- data2$data %>% filter(Country != "United States")
data2_rmUS <- getLM2(data2_rmUS)
grid.draw(data2_rmUS$plot)
data2_rmGB <- data2$data %>% filter(Country != "Great Britain")
data2_rmGB <- getLM2(data2_rmGB)
grid.draw(data2_rmGB$plot)
data2_rmUS$data
data2_rmGB$data
data1 <- data.frame(y = c(0.9, 2.1, 2.9, 4.1, 20),
x = c(4, 3, 2, 1, 20))
# define my custom function for part 1.
getLM1 <- function(data){
data_lm <- lm(y ~ 1 + x, data)
data <- add_column(data,
studentized_res = rstudent(data_lm),
leverage = hatvalues(data_lm),
cooks_dis = cooks.distance(data_lm))
g1 <- ggplot(data, aes(x = x, y = y)) +
geom_point() + geom_smooth(method = "lm") + theme_classic()
g2 <- ggplot(data, aes(x = x, y = studentized_res)) +
geom_point() +
geom_hline(yintercept = qt(0.05/2, data_lm$df.residual - 1), color = "red") +
geom_hline(yintercept = qt((1-0.05/2), data_lm$df.residual - 1), color = "red") +
theme_classic()
g3 <- ggplot(data, aes(x = x, y = leverage)) +
geom_point() +
geom_hline(yintercept = 2*length(data_lm$coef)/nrow(data), color = "red") + # 2p/n
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
g4 <- ggplot(data, aes(x = x, y = cooks_dis)) +
geom_point() +
geom_hline(yintercept = c(0.5, 1), color = "red") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
plot = arrangeGrob(g1, g2, g3, g4, nrow = 1)
return(list(data = data, lm = data_lm, plot = plot))
}
data1 <- getLM1(data1)
summary(data1$lm)
grid.draw(data1$plot)
data1_rmOutlier <- data1$data %>%
filter(studentized_res > qt(0.05/2, data1$lm$df.residual - 1),
studentized_res < qt((1-0.05/2), data1$lm$df.residual - 1))
data1_rmOutlier <- getLM1(data1_rmOutlier)
summary(data1_rmOutlier$lm)
grid.draw(data1_rmOutlier$plot)
grid.draw(data1$plot)
grid.draw(data1$plot)
grid.draw(data1$plot)
plot = arrangeGrob(g1, g2, g3, g4, nrow = 2)
# define my custom function for part 1.
getLM1 <- function(data){
data_lm <- lm(y ~ 1 + x, data)
data <- add_column(data,
studentized_res = rstudent(data_lm),
leverage = hatvalues(data_lm),
cooks_dis = cooks.distance(data_lm))
g1 <- ggplot(data, aes(x = x, y = y)) +
geom_point() + geom_smooth(method = "lm") + theme_classic()
g2 <- ggplot(data, aes(x = x, y = studentized_res)) +
geom_point() +
geom_hline(yintercept = qt(0.05/2, data_lm$df.residual - 1), color = "red") +
geom_hline(yintercept = qt((1-0.05/2), data_lm$df.residual - 1), color = "red") +
theme_classic()
g3 <- ggplot(data, aes(x = x, y = leverage)) +
geom_point() +
geom_hline(yintercept = 2*length(data_lm$coef)/nrow(data), color = "red") + # 2p/n
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
g4 <- ggplot(data, aes(x = x, y = cooks_dis)) +
geom_point() +
geom_hline(yintercept = c(0.5, 1), color = "red") +
theme_classic() +
theme(axis.text.x = element_text(angle = 90))
plot = arrangeGrob(g1, g2, g3, g4, nrow = 2)
return(list(data = data, lm = data_lm, plot = plot))
}
data1 <- data.frame(y = c(0.9, 2.1, 2.9, 4.1, 20),
x = c(4, 3, 2, 1, 20))
data1 <- getLM1(data1)
grid.draw(data1$plot)
grid.draw(data1$plot)
data1_rmOutlier <- data1$data %>%
filter(studentized_res > qt(0.05/2, data1$lm$df.residual - 1),
studentized_res < qt((1-0.05/2), data1$lm$df.residual - 1))
data1_rmOutlier <- getLM1(data1_rmOutlier)
summary(data1_rmOutlier$lm)
grid.draw(data1_rmOutlier$plot)
grid.draw(data1_rmOutlier$plot)
a = 1:10
sum(a^2)^2
sum(a^2)^2 / sum(a^4)
length(a)
a = seq(0, 1, 0.1)
sum(a^2)^2 / sum(a^4)
length(a)
data5 <- read_csv("W_pipeline.csv")
data5_lm <- lm(Lab ~ 1 + Field, data5)
summary(data5_lm)
res_lm <- lm(I(log(residual^2)) ~ 1 + Field, data5)
data5 <- data5 %>%
add_column(residual = residuals(data5_lm),
studentized_res = rstudent(data5_lm))
g1 <- ggplot(data5, aes(x = Field, y = Lab)) +
geom_point() + geom_smooth(method = "lm") + theme_classic()
g2 <- ggplot(data5, aes(x = Field, y = studentized_res)) +
geom_point() +
geom_hline(yintercept = qt(0.05/2, data5_lm$df.residual - 1), color = "red") +
geom_hline(yintercept = qt((1-0.05/2), data5_lm$df.residual - 1), color = "red") +
theme_classic()
grid.arrange(g1, g2, nrow = 1)
res_lm <- lm(I(log(residual^2)) ~ 1 + Field, data5)
weight <- 1 / exp(fitted(res_lm))
data5_wlm <- lm(Lab ~ 1 + Field, weights = weight, data5)
summary(data5_wlm)
