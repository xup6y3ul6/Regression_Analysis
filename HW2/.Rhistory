geom_path(arrow = arrow())
iris %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()+
geom_path(arrow = arrow(angle = 30, length = unit(0.25, "inches"),
ends = "last", type = "open"))
iris %>% mutate(trial = 1:length(Sepal.Length)) %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, colour = as.numeric(trial))) +
geom_point()+
geom_path(arrow = arrow(angle = 30, length = unit(0.25, "inches"),
ends = "last", type = "open"))
ggplot(aes(x = Sepal.Length, y = Sepal.Width, group = trial) +
ggplot(aes(x = Sepal.Length, y = Sepal.Width, group = trial) +
) +
geom_point()+
geom_path(arrow = arrow(angle = 30, length = unit(0.25, "inches"),
ends = "last", type = "open"))
ends = "last", type = "open"))
iris %>% mutate(trial = 1:length(Sepal.Length)) %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, group = trial)) +
geom_point()+
geom_path(arrow = arrow(angle = 30, length = unit(0.25, "inches"),
ends = "last", type = "open"))
iris %>% mutate(trial = 1:length(Sepal.Length)) %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, group = trial)) +
geom_point()+
geom_path(arrow = arrow(angle = 30, length = unit(0.25, "inches"),
ends = "last", type = "open"))
iris %>% mutate(trial = 1:length(Sepal.Length)) %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = trial)) +
geom_point()+
geom_path(arrow = arrow(angle = 30, length = unit(0.25, "inches"),
ends = "last", type = "open"))
iris %>% mutate(trial = 1:length(Sepal.Length))
iris %>% mutate(trial = 1:length(Sepal.Length)) %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = trial)) +
geom_point()+
geom_path(arrow = arrow(angle = 30, length = unit(0.5, "inches"),
ends = "last", type = "open"))
iris %>% mutate(trial = 1:length(Sepal.Length)) %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = trial)) +
geom_point()+
geom_path(arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "open"))
iris %>% mutate(trial = 1:length(Sepal.Length)) %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = trial)) +
geom_point()+
geom_path(arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "close"))
iris %>% mutate(trial = 1:length(Sepal.Length)) %>%
ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = trial)) +
geom_point()+
geom_path(arrow = arrow(angle = 30, length = unit(0.1, "inches"),
ends = "last", type = "closed"))
library(bcp)
install.packages("bcp")
library(bcp)
example(bcp)
knitr::opts_chunk$set(
message = FALSE, 	warning = FALSE, comment = "",
fig.width = 5, fig.asp = 0.68, fig.align = "center",
eval = TRUE
)
predictsAt5 <- lapply(fitlms, function(.fitlm){
data.frame(yhat = predict(.fitlm, data.frame(x = 5)))
}) %>%
bind_rows(.id = "replicate")
# generate 500 samples with 19 observations in each sample
nReplicate <- 500
getObservation <- function(){
beta <- c(50, 10)
sigma <- 4
x <- seq(1, 10, by = 0.5)
y <- rnorm(n = length(x),
mean = beta[1]+beta[2]*x,
sd = sigma)
sample <- tibble(x = x, y = y)
}
samples <- replicate(nReplicate, getObservation(), simplify = FALSE)
library(tidyverse)
# generate 500 samples with 19 observations in each sample
nReplicate <- 500
getObservation <- function(){
beta <- c(50, 10)
sigma <- 4
x <- seq(1, 10, by = 0.5)
y <- rnorm(n = length(x),
mean = beta[1]+beta[2]*x,
sd = sigma)
sample <- tibble(x = x, y = y)
}
samples <- replicate(nReplicate, getObservation(), simplify = FALSE)
# draw one observation
samples[[1]] %>%
ggplot(aes(x, y)) +
geom_point() +
geom_smooth(method = "lm") +
annotate("text", x = 7, y = 150,
label = "y = 10 + 50x", color = "blue") +
scale_x_continuous(breaks = 1:10) +
theme_classic()
fitlms <- lapply(samples, function(.sample){lm(y ~ 1 + x, data = .sample)})
coefs <- lapply(fitlms, broom::tidy) %>% bind_rows(.id = "replicate")
coefs_labeller <- labeller(term = c(`(Intercept)` = "beta0", x = "beta1"))
coefs %>%
ggplot(aes(x = estimate)) +
geom_histogram(color = "white") +
facet_wrap(~ term, scales = "free_x", labeller = coefs_labeller) +
labs(title = "The histogram of the coefficients") +
theme_classic()
predictsAt5 <- lapply(fitlms, function(.fitlm){
data.frame(yhat = predict(.fitlm, data.frame(x = 5)))
}) %>%
bind_rows(.id = "replicate")
ggplot(predictsAt5, aes(x = yhat)) +
geom_histogram(color = "white") +
labs(title = expression(paste("The histograms of E(y|x = 5)"))) +
theme_classic()
coefs_labeller <- labeller(term = c(`(Intercept)` = expression(hat(beta)[0]),
x = "beta1"))
coefs %>%
ggplot(aes(x = estimate)) +
geom_histogram(color = "white") +
facet_wrap(~ term, scales = "free_x", labeller = coefs_labeller) +
labs(title = "The histogram of the coefficients") +
theme_classic()
coefs_labeller <- labeller(term = c(`(Intercept)` = expression(hat(beta)[0]),
x = "beta1"))
coefs %>%
ggplot(aes(x = estimate)) +
geom_histogram(color = "white") +
facet_wrap(~ term, scales = "free_x", labeller = coefs_labeller) +
labs(title = "The histogram of the coefficients") +
theme_classic()
coefs <- lapply(fitlms, broom::tidy) %>% bind_rows(.id = "replicate")
coefs <- lapply(fitlms, broom::tidy) %>% bind_rows(.id = "replicate")
coefs_labeller <- labeller(term = c(`(Intercept)` = expression(hat(beta)[0]),
x = "beta1"))
coefs %>%
ggplot(aes(x = estimate)) +
geom_histogram(color = "white") +
facet_wrap(~ term, scales = "free_x", labeller = coefs_labeller) +
labs(title = "The histogram of the coefficients") +
theme_classic()
coefs_labeller <- labeller(term = c(`(Intercept)` = "",
x = "beta1"))
coefs %>%
ggplot(aes(x = estimate)) +
geom_histogram(color = "white") +
facet_wrap(~ term, scales = "free_x", labeller = coefs_labeller) +
labs(title = "The histogram of the coefficients") +
theme_classic()
coefs_labeller <- labeller(term = c(`(Intercept)` = expression(hat(beta)),
x = "beta1"))
coefs %>%
ggplot(aes(x = estimate)) +
geom_histogram(color = "white") +
facet_wrap(~ term, scales = "free_x", labeller = coefs_labeller) +
labs(title = "The histogram of the coefficients") +
theme_classic()
coefs_labeller <- labeller(term = c(`(Intercept)` = as.character(expression(hat(beta))),
x = "beta1"))
coefs %>%
ggplot(aes(x = estimate)) +
geom_histogram(color = "white") +
facet_wrap(~ term, scales = "free_x", labeller = coefs_labeller) +
labs(title = "The histogram of the coefficients") +
theme_classic()
coefs %>%
ggplot(aes(x = estimate)) +
geom_histogram(aes(y = ..density..), color = "white") +
facet_wrap(~ term, scales = "free_x", labeller = coefs_labeller) +
labs(title = "The histogram of the coefficients") +
theme_classic()
coefs %>%
ggplot(aes(x = estimate)) +
geom_histogram(aes(y = ..density..), color = "white") +
facet_wrap(~ term, scales = "free", labeller = coefs_labeller) +
labs(title = "The histogram of the coefficients") +
theme_classic()
ggplot(predictsAt5, aes(x = yhat)) +
geom_histogram(aes(y = ..density..), color = "white") +
labs(title = expression(paste("The histograms of E(y|x = 5)"))) +
theme_classic()
coef_cis <- lapply(fitlms, function(.fitlm){
as.data.frame(confint(.fitlm, "x", level = 0.95))
}) %>%
bind_rows(.id = "replicate")
coef_cis %>%
mutate(contain10 = (`2.5 %` <= 10) & (10 <= `97.5 %`)) %>%
summarise(confidence = mean(contain10))
predictsAt5_cis <- lapply(fitlms, function(.fitlm){
data.frame(predict(.fitlm, data.frame(x = 5), interval = "confidence"))
}) %>%
bind_rows(.id = "replicate")
predictsAt5_cis %>%
mutate(contain100 = (lwr <= 100) & (100 <= upr)) %>%
summarise(confidence = mean(contain100))
# generate 500 samples with 19 observations in each sample
set.seed(9999)
nReplicate <- 500
getObservation <- function(){
beta <- c(50, 10)
sigma <- 4
x <- seq(1, 10, by = 0.5)
y <- rnorm(n = length(x),
mean = beta[1]+beta[2]*x,
sd = sigma)
sample <- tibble(x = x, y = y)
}
samples <- replicate(nReplicate, getObservation(), simplify = FALSE)
# draw one observation
samples[[1]] %>%
ggplot(aes(x, y)) +
geom_point() +
geom_smooth(method = "lm") +
annotate("text", x = 7, y = 150,
label = "y = 10 + 50x", color = "blue") +
scale_x_continuous(breaks = 1:10) +
theme_classic()
fitlms <- lapply(samples, function(.sample){lm(y ~ 1 + x, data = .sample)})
coefs <- lapply(fitlms, broom::tidy) %>% bind_rows(.id = "replicate")
coefs_labeller <- labeller(term = c(`(Intercept)` = "beta0", x = "beta1"))
coefs %>%
ggplot(aes(x = estimate)) +
geom_histogram(aes(y = ..density..), color = "white") +
facet_wrap(~ term, scales = "free", labeller = coefs_labeller) +
labs(title = "The histogram of the coefficients") +
theme_classic()
predictsAt5 <- lapply(fitlms, function(.fitlm){
data.frame(yhat = predict(.fitlm, data.frame(x = 5)))
}) %>%
bind_rows(.id = "replicate")
ggplot(predictsAt5, aes(x = yhat)) +
geom_histogram(aes(y = ..density..), color = "white") +
labs(title = expression(paste("The histograms of E(y|x = 5)"))) +
theme_classic()
coef_cis <- lapply(fitlms, function(.fitlm){
as.data.frame(confint(.fitlm, "x", level = 0.95))
}) %>%
bind_rows(.id = "replicate")
coef_cis %>%
mutate(contain10 = (`2.5 %` <= 10) & (10 <= `97.5 %`)) %>%
summarise(confidence = mean(contain10))
predictsAt5_cis <- lapply(fitlms, function(.fitlm){
data.frame(predict(.fitlm, data.frame(x = 5), interval = "confidence"))
}) %>%
bind_rows(.id = "replicate")
predictsAt5_cis %>%
mutate(contain100 = (lwr <= 100) & (100 <= upr)) %>%
summarise(confidence = mean(contain100))
x = 1:10
var(x)
var(x-mean(x))
n = 10
x = seq(-3, 3, 0.05)
(n-1)/(n-2)*(dt(x, df = n-2))/(dt(x, df = n-1))
qt(0.025, df = 30)
qt(0.025, df = 2)
x = seq(-4, 4, 0.05)
(n-1)/(n-2)*dt(x, n-2)/dt(x, n-1)
n = 3
x = seq(-4, 4, 0.05)
(n-1)/(n-2)*dt(x, n-2)/dt(x, n-1)
n = 5
x = seq(-4, 4, 0.05)
(n-1)/(n-2)*dt(x, n-2)/dt(x, n-1)
n = 30
x = seq(-4, 4, 0.05)
(n-1)/(n-2)*dt(x, n-2)/dt(x, n-1)
knitr::opts_chunk$set(
message = FALSE, 	warning = FALSE, comment = "",
fig.width = 5, fig.asp = 0.68, fig.align = "center",
eval = TRUE
)
library(tidyverse)
library(tidyverse)
# generate 500 samples with 19 observations in each sample
set.seed(9999)
nReplicate <- 500
getObservation <- function(){
beta <- c(50, 10)
sigma <- 4
x <- seq(0.5, 10, by = 0.5)
y <- rnorm(n = length(x),
mean = beta[1]+beta[2]*x,
sd = sigma)
sample <- tibble(x = x, y = y)
}
samples <- replicate(nReplicate, getObservation(), simplify = FALSE)
# draw one observation
samples[[1]] %>%
ggplot(aes(x, y)) +
geom_point() +
geom_smooth(method = "lm") +
annotate("text", x = 7, y = 150,
label = "y = 10 + 50x", color = "blue") +
scale_x_continuous(breaks = 1:10) +
theme_classic()
fitlms <- lapply(samples, function(.sample){lm(y ~ 1 + x, data = .sample)})
coefs <- lapply(fitlms, broom::tidy) %>% bind_rows(.id = "replicate")
coefs_labeller <- labeller(term = c(`(Intercept)` = "beta0", x = "beta1"))
coefs %>%
ggplot(aes(x = estimate)) +
geom_histogram(aes(y = ..density..), color = "white") +
facet_wrap(~ term, scales = "free", labeller = coefs_labeller) +
labs(title = "The histogram of the coefficients") +
theme_classic()
predictsAt5 <- lapply(fitlms, function(.fitlm){
data.frame(yhat = predict(.fitlm, data.frame(x = 5)))
}) %>%
bind_rows(.id = "replicate")
ggplot(predictsAt5, aes(x = yhat)) +
geom_histogram(aes(y = ..density..), color = "white") +
labs(title = expression(paste("The histograms of E(y|x = 5)"))) +
theme_classic()
coef_cis <- lapply(fitlms, function(.fitlm){
as.data.frame(confint(.fitlm, "x", level = 0.95))
}) %>%
bind_rows(.id = "replicate")
coef_cis %>%
mutate(contain10 = (`2.5 %` <= 10) & (10 <= `97.5 %`)) %>%
summarise(confidence = mean(contain10))
predictsAt5_cis <- lapply(fitlms, function(.fitlm){
data.frame(predict(.fitlm, data.frame(x = 5), interval = "confidence"))
}) %>%
bind_rows(.id = "replicate")
predictsAt5_cis %>%
mutate(contain100 = (lwr <= 100) & (100 <= upr)) %>%
summarise(confidence = mean(contain100))
n = 10
x = seq(-4, 4, 0.05)
sqrt((n-1)/(n-2))*dt(x, df = n-2)/dt(x, df = n-1)
n = 3
x = seq(-4, 4, 0.05)
sqrt((n-1)/(n-2))*dt(x, df = n-2)/dt(x, df = n-1)
n = 30
x = seq(-4, 4, 0.05)
sqrt((n-1)/(n-2))*dt(x, df = n-2)/dt(x, df = n-1)
n = 100
x = seq(-4, 4, 0.05)
sqrt((n-1)/(n-2))*dt(x, df = n-2)/dt(x, df = n-1)
0.15/ 0.05
0.05/0.25
sin(pi())
sin(pi)
cos(pi)
remotes::install_github("r-lib/rlang")
install.packages("devtools")
install.packages("devtools")
remove.packages("rlang", lib="~/R/win-library/4.0")
install.packages("devtools")
install.packages("devtools")
remotes::install_github("r-lib/rlang")
knitr::opts_chunk$set(
message = FALSE, 	warning = FALSE, comment = "",
fig.width = 5, fig.asp = 0.68, fig.align = "center",
eval = TRUE
)
library(tidyverse)
data <- read_csv("exhibit_2.9.csv")
data
logdata <- data %>%
mutate(across(contains("."), log))
lm.20 <- lm(Val.20 ~ 1 + Cap.20 + Lab.20, logdata)
lm.36 <- lm(Val.36 ~ 1 + Cap.36 + Lab.36, logdata)
lm.37 <- lm(Val.37 ~ 1 + Cap.37 + Lab.37, logdata)
lm.list <- list(lm.20, lm.36, lm.37)
getCoefficient <- function(lm.list, coefNames){
.coef <- lapply(lm.list, coefficients)
coef <- do.call(rbind, .coef)
colnames(coef) <- coefNames
coef <- as.tibble(coef) %>%
mutate(sector = c("(20)", "(36)", "(37)"),
.before = `log(alpha)`)
}
coef <- getCoefficient(lm.list, coefNames = c("log(alpha)", "beta1", "beta2"))
coef %>% mutate(alpha = exp(`log(alpha)`), .before = `log(alpha)`)
lm.cnstr.20 <- lm(I(Val.20 - Lab.20) ~ 1 + I(Cap.20 - Lab.20), logdata)
lm.cnstr.36 <- lm(I(Val.36 - Lab.36) ~ 1 + I(Cap.36 - Lab.36), logdata)
lm.cnstr.37 <- lm(I(Val.37 - Lab.37) ~ 1 + I(Cap.37 - Lab.37), logdata)
lm.cnstr.list <- list(lm.cnstr.20, lm.cnstr.36, lm.cnstr.37)
coef.cnstr <- getCoefficient(lm.cnstr.list, coefNames = c("log(alpha)", "beta1"))
coef.cnstr %>%
mutate(alpha = exp(`log(alpha)`), .before = `log(alpha)`) %>%
mutate(beta2 = 1 - beta1)
lm2.20 <- lm(Val.20 ~ 1 + YEAR + Cap.20 + Lab.20, logdata)
lm2.36 <- lm(Val.36 ~ 1 + YEAR + Cap.36 + Lab.36, logdata)
lm2.37 <- lm(Val.37 ~ 1 + YEAR + Cap.37 + Lab.37, logdata)
lm2.list <- list(lm2.20, lm2.36, lm2.37)
coef2 <- getCoefficient(lm2.list, coefNames = c("log(alpha)", "log(eta)", "beta1", "beta2"))
coef2 %>%
mutate(alpha = exp(`log(alpha)`), .before = `log(alpha)`) %>%
mutate(eta = exp(`log(eta)`), .before = `log(eta)`)
lm2.cnstr.20 <- lm(I(Val.20 - Lab.20) ~ 1 + YEAR + I(Cap.20 - Lab.20), logdata)
lm2.cnstr.36 <- lm(I(Val.36 - Lab.36) ~ 1 + YEAR + I(Cap.36 - Lab.36), logdata)
lm2.cnstr.37 <- lm(I(Val.37 - Lab.37) ~ 1 + YEAR + I(Cap.37 - Lab.37), logdata)
lm2.cnstr.list <- list(lm2.cnstr.20, lm2.cnstr.36, lm2.cnstr.37)
coef.cnstr <- getCoefficient(lm.cnstr.list, coefNames = c("log(alpha)", "beta1"))
coef.cnstr %>%
mutate(alpha = exp(`log(alpha)`), .before = `log(alpha)`) %>%
mutate(beta2 = 1 - beta1)
coef2 <- getCoefficient(lm2.list, coefNames = c("log(alpha)", "log(eta)", "beta1", "beta2"))
coef2 %>%
mutate(alpha = exp(`log(alpha)`), .before = `log(alpha)`) %>%
mutate(eta = exp(`log(eta)`), .before = `log(eta)`)
plot(lm.20)
plot(lm.20)
coef2.cnstr <- getCoefficient(lm2.cnstr.list, coefNames = c("log(alpha)", "log(eta)", "beta1"))
coef2.cnstr %>%
mutate(alpha = exp(`log(alpha)`), .before = `log(alpha)`) %>%
mutate(eta = exp(`log(eta)`), .before = `log(eta)`) %>%
mutate(beta2 = 1 - beta1)
logdata <- data %>%
mutate(across(contains("."), log))
logdata
data
data <- read_csv("exhibit_2.9.csv") %>%
selcet(-X1)
data
data <- read_csv("exhibit_2.9.csv") %>%
selcet(-X1)
data <- read_csv("exhibit_2.9.csv") %>%
select(-X1)
data
data <- read_csv("exhibit_2.9.csv") %>%
select(-X1)
data
library(tidyverse)
data <- read_csv("exhibit_2.9.csv") %>%
select(-X1)
data
data <- read_csv("exhibit_2.9.csv") %>%
select(-1)
data <- read_csv("exhibit_2.9.csv") %>%
select(-1)
data <- read_csv("exhibit_2.9.csv") %>%
select(-Index)
data
data <- read_csv("exhibit_2.9.csv") %>%
select(-Index)
data <- read_csv("exhibit_2.9.csv")
data
library(tidyverse)
data <- read_csv("exhibit_2.9.csv")
select(-Index)
library(tidyverse)
data <- read_csv("exhibit_2.9.csv")
data
library(tidyverse)
data <- read_csv("exhibit_2.9.csv") %>%
select(-X1)
data
a <- function(n){
x <- rep(1, n)
y <- 1:n
z = x/y
sum(z)
}
a(5)
a(1)
a(10)
a(100)
a(1000)
a(10^5)
setwd("C:/Users/Nick Lin/OneDrive - g.ntu.edu.tw/109_心理碩二/迴歸分析/HW2")
knitr::opts_chunk$set(
message = FALSE, 	warning = FALSE, comment = "",
fig.width = 5, fig.asp = 0.68, fig.align = "center",
eval = TRUE
)
library(tidyverse)
data <- read_csv("exhibit_2.9.csv") %>%
select(-X1)
data
logdata <- data %>%
mutate(across(contains("."), log))
logdata
lm.20 <- lm(Val.20 ~ 1 + Cap.20 + Lab.20, logdata)
lm.36 <- lm(Val.36 ~ 1 + Cap.36 + Lab.36, logdata)
lm.37 <- lm(Val.37 ~ 1 + Cap.37 + Lab.37, logdata)
lm.list <- list(lm.20, lm.36, lm.37)
getCoefficient <- function(lm.list, coefNames){
.coef <- lapply(lm.list, coefficients)
coef <- do.call(rbind, .coef)
colnames(coef) <- coefNames
coef <- as.tibble(coef) %>%
mutate(sector = c("(20)", "(36)", "(37)"),
.before = `log(alpha)`)
}
coef <- getCoefficient(lm.list, coefNames = c("log(alpha)", "beta1", "beta2"))
coef %>% mutate(alpha = exp(`log(alpha)`), .before = `log(alpha)`)
lm.cnstr.20 <- lm(I(Val.20 - Lab.20) ~ 1 + I(Cap.20 - Lab.20), logdata)
lm.cnstr.36 <- lm(I(Val.36 - Lab.36) ~ 1 + I(Cap.36 - Lab.36), logdata)
lm.cnstr.37 <- lm(I(Val.37 - Lab.37) ~ 1 + I(Cap.37 - Lab.37), logdata)
lm.cnstr.list <- list(lm.cnstr.20, lm.cnstr.36, lm.cnstr.37)
lm.cnstr.20 <- lm(I(Val.20 - Lab.20) ~ 1 + I(Cap.20 - Lab.20), logdata)
lm.cnstr.20a <- lm((Val.20 - Lab.20) ~ 1 + (Cap.20 - Lab.20), logdata)
lm.cnstr.36 <- lm(I(Val.36 - Lab.36) ~ 1 + I(Cap.36 - Lab.36), logdata)
lm.cnstr.37 <- lm(I(Val.37 - Lab.37) ~ 1 + I(Cap.37 - Lab.37), logdata)
lm.cnstr.list <- list(lm.cnstr.20, lm.cnstr.36, lm.cnstr.37)
lm.cnstr.20 <- lm(I(Val.20 - Lab.20) ~ 1 + I(Cap.20 - Lab.20), logdata)
lm.cnstr.20a <- lm((Val.20 - Lab.20) ~ 1 + (Cap.20 - Lab.20), logdata)
lm.cnstr.36 <- lm(I(Val.36 - Lab.36) ~ 1 + I(Cap.36 - Lab.36), logdata)
lm.cnstr.37 <- lm(I(Val.37 - Lab.37) ~ 1 + I(Cap.37 - Lab.37), logdata)
lm.cnstr.list <- list(lm.cnstr.20, lm.cnstr.20a,lm.cnstr.36, lm.cnstr.37)
coef.cnstr <- getCoefficient(lm.cnstr.list, coefNames = c("log(alpha)", "beta1"))
summay(lm.cnstr.20)
summary(lm.cnstr.20)
summary(lm.cnstr.20a)
terms(lm.cnstr.20)
terms(lm.cnstr.20a)
